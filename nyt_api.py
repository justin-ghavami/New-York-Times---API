# -*- coding: utf-8 -*-
"""NYT-API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C7PufekTAr1KKYxjZ6f2o06JKAKgherH

## Imports
"""

import requests 
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

"""## Query The Data Through The NYT API. ðŸ—ž"""

def execute(year, month):
  requestUrl = f"https://api.nytimes.com/svc/archive/v1/{year}/{month}.json?api-key=wzF4H7JVaVYRQ6h74L0lszlGtxzFMKK5"
  requestHeaders = {
    "Accept": "application/json"
  }

  response = requests.get(requestUrl, headers=requestHeaders)

  return response

if __name__ == "__main__":
  execute(2022, 6)

"""## Checking Our Response"""

response = execute(2022, 6)
print(response)

"""## Bringing the data into a DataFrame

**I have no systematic way of bringing my data into a Pandas DataFrame. I typically just go through the data & explore it as much as I can to understand it and then bring it into a DataFrame.**
"""

json_response = response.json()
for i in json_response['response']['docs'][:5]:
  print(i)

df = pd.DataFrame.from_dict(json_response['response']['docs'])
df.head()

"""### Deleting what I do not need. """

# multimedia, byline won't be needed for my purposes (feel free to keep whatever data you want)
# uri and _id are the same so I will just keep the _id and put it in our first column
df.drop(['multimedia', 'byline', 'uri'], axis=1, inplace=True)

"""### Reordering to make it more readable."""

cols = list(df.columns)
print(cols)

# https://www.datasciencemadesimple.com/re-arrange-or-re-order-the-column-of-dataframe-in-pandas-python-2/ --> helpful article to reorder columns
columns_reordered = ['_id', 'abstract', 'web_url', 'snippet', 'lead_paragraph', 'print_section', 'print_page', 'source', 'pub_date', 'document_type',  'type_of_material', 'word_count','news_desk', 'section_name', 'subsection_name' , 'headline', 'keywords']
df2=df.reindex(columns= columns_reordered)
df2.head()

"""### Changing my datetime column to a date column."""

# First turning the column into a datetime column
df2['pub_date'] = pd.to_datetime(df['pub_date'])
print(df2.info())

# Changing my datetime column to a date column 
df2['pub_date'] = pd.to_datetime(df2['pub_date']).dt.date
df2.head()

"""### Checking for missing values

I check for missing values to further understand my data. The next step will be to visualize my data to see what I am working with. 
"""

for column in df2.columns:
  print(f"{column} : {df2[column].isna().sum()}")

"""## Time for some visualizations. ðŸ“Š

### Histograms to visualize the count of values within our columns

Let's create some functions since we will be reusing them.
"""

def plot_histogram_descending(df, x, color=None, color_discrete_sequence=None,labels={}, title=""):
  fig = px.histogram(df, x=x, text_auto=True, color=color, title=title, 
                   color_discrete_sequence=color_discrete_sequence, labels=labels)
  fig.update_layout(bargap=0.2)
  fig.update_xaxes(ticks="inside")
  fig.update_xaxes(categoryorder="total descending")
  fig.update_yaxes(ticks="inside", col=1)
  return fig.show()

def plot_histogram(df, x, color=None, color_discrete_sequence=None,labels={}, title=""):
  fig = px.histogram(df, x=x, text_auto=True, color=color, title=title, 
                   color_discrete_sequence=color_discrete_sequence, labels=labels)
  fig.update_layout(bargap=0.2)
  fig.update_xaxes(ticks="inside")
  fig.update_yaxes(ticks="inside", col=1)
  return fig.show()

plot_histogram(df2, x='pub_date', color='document_type', 
               labels=dict(pub_date="Date Published", document_type="Type of Document"),
               title="<b>Timeline of Articles Published in Month</b>")

plot_histogram_descending(df2, x='type_of_material', color='type_of_material', 
               labels=dict(type_of_material="Material Type"),
               title="<b>Articles by Material Type</b>")

plot_histogram_descending(df2, x='type_of_material', color='document_type',
                          color_discrete_sequence=['lightblue', 'green'],
                          labels=dict(type_of_material="Material Type"),
                          title="<b>Articles by Material Type</b>")

plot_histogram_descending(df2, x='news_desk', color='document_type', 
                              color_discrete_sequence=['coral', 'darkblue'],
                              labels=dict(news_desk="News Desk"),
                              title="<b>Articles Categorized by their News Desk</b>")

plot_histogram_descending(df2, x='section_name', color='document_type',
                              color_discrete_sequence=['gold', 'gray'],
                              labels=dict(section_name="Section", document_type="Document Type"),
                              title="<b>Articles Categorized by Section</b>")

plot_histogram_descending(df2, x='subsection_name', color='document_type',
                              color_discrete_sequence=['teal', 'lemonchiffon'],
                              labels=dict(subsection_name="Subsection", document_type="Document Type"),
                              title="<b>Articles Categorized by Subsection</b>")

